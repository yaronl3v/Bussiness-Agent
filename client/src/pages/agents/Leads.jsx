import { useState, useEffect } from 'react';
import { useOutletContext } from 'react-router-dom';
import { 
  MagnifyingGlassIcon,
  FunnelIcon,
  ArrowDownTrayIcon,
  EyeIcon,
  ArrowTopRightOnSquareIcon
} from '@heroicons/react/24/outline';
import { agentsService, leadsService } from '../../services/index.js';
import Button from '../../components/ui/Button.jsx';
import Card from '../../components/ui/Card.jsx';
import Badge from '../../components/ui/Badge.jsx';
import EmptyState from '../../components/ui/EmptyState.jsx';
import LoadingSpinner from '../../components/ui/LoadingSpinner.jsx';
import Drawer from '../../components/ui/Drawer.jsx';
import VendorRouting from '../../components/VendorRouting.jsx';
import { useToast } from '../../hooks/useToast.js';
import { formatDistanceToNow } from 'date-fns';

export default function Leads() {
  const { agent, orgId } = useOutletContext();
  const [leads, setLeads] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedLead, setSelectedLead] = useState(null);
  const [showLeadDetail, setShowLeadDetail] = useState(false);
  const [showVendorRouting, setShowVendorRouting] = useState(false);
  const { success, error } = useToast();

  useEffect(() => {
    loadLeads();
  }, [agent.id]);

  const loadLeads = async () => {
    try {
      setLoading(true);
      const data = await leadsService.getLeads(agent.id);
      // Ensure we always have an array
      const leadsArray = Array.isArray(data) ? data : (data?.data || []);
      setLeads(leadsArray);
    } catch (error) {
      console.error('Failed to load leads:', error);
      error('Failed to load leads');
      setLeads([]); // Set empty array on error
    } finally {
      setLoading(false);
    }
  };

  const filteredLeads = (leads || []).filter(lead => {
    const matchesSearch = 
      lead.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.phone?.includes(searchTerm);
    const matchesStatus = statusFilter === 'all' || lead.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusVariant = (status) => {
    switch (status) {
      case 'new': return 'default';
      case 'contacted': return 'indexing';
      case 'qualified': return 'success';
      case 'closed': return 'disabled';
      default: return 'default';
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">Leads</h2>
          <p className="mt-1 text-sm text-gray-500">
            Manage leads generated by your agent ({leads.length} total)
          </p>
        </div>
        
        <Button variant="secondary" disabled={leads.length === 0}>
          <ArrowDownTrayIcon className="h-4 w-4 mr-2" />
          Export CSV
        </Button>
      </div>

      {/* Filters */}
      <Card className="p-4">
        <div className="flex flex-col gap-4 sm:flex-row sm:items-center">
          <div className="relative flex-1 max-w-sm">
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search leads..."
              className="form-input pl-10"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="flex items-center space-x-2">
            <FunnelIcon className="h-4 w-4 text-gray-400" />
            <select
              className="form-select w-full sm:w-auto"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="all">All statuses</option>
              <option value="new">New</option>
              <option value="contacted">Contacted</option>
              <option value="qualified">Qualified</option>
              <option value="closed">Closed</option>
            </select>
          </div>
        </div>
      </Card>

      {/* Leads List */}
      {filteredLeads.length === 0 ? (
        <EmptyState
          icon={MagnifyingGlassIcon}
          title={leads.length === 0 ? "No leads yet" : "No leads found"}
          description={
            leads.length === 0 
              ? "Leads will appear here when users interact with your agent"
              : "Try adjusting your search or filter criteria"
          }
        />
      ) : (
        <div className="space-y-4">
          {filteredLeads.map((lead) => (
            <Card key={lead.id} className="p-4 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between">
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-3">
                    <h3 className="font-medium text-gray-900">
                      {lead.name || 'Anonymous Lead'}
                    </h3>
                    <Badge variant={getStatusVariant(lead.status)}>
                      {lead.status}
                    </Badge>
                  </div>
                  
                  <div className="mt-1 flex items-center space-x-4 text-sm text-gray-500">
                    {lead.email && (
                      <span>{lead.email}</span>
                    )}
                    {lead.phone && (
                      <>
                        {lead.email && <span>•</span>}
                        <span>{lead.phone}</span>
                      </>
                    )}
                    {lead.company && (
                      <>
                        {(lead.email || lead.phone) && <span>•</span>}
                        <span>{lead.company}</span>
                      </>
                    )}
                  </div>
                  
                  <p className="mt-1 text-xs text-gray-400">
                    Created {formatDistanceToNow(new Date(lead.createdAt))} ago
                    {lead.conversationId && (
                      <span> • From conversation #{lead.conversationId}</span>
                    )}
                  </p>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Button 
                    size="sm" 
                    variant="ghost"
                    onClick={() => {
                      setSelectedLead(lead);
                      setShowLeadDetail(true);
                    }}
                  >
                    <EyeIcon className="h-4 w-4" />
                  </Button>
                  
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => {
                      setSelectedLead(lead);
                      setShowVendorRouting(true);
                    }}
                    className="text-blue-600 hover:text-blue-700"
                  >
                    <ArrowTopRightOnSquareIcon className="h-4 w-4" />
                  </Button>
                  
                  <select
                    className="form-select text-sm"
                    value={lead.status}
                    onChange={async (e) => {
                      try {
                        await leadsService.updateLead(lead.id, { status: e.target.value });
                        success('Lead status updated');
                        loadLeads(); // Refresh the list
                      } catch (err) {
                        error('Failed to update lead status');
                      }
                    }}
                  >
                    <option value="new">New</option>
                    <option value="contacted">Contacted</option>
                    <option value="qualified">Qualified</option>
                    <option value="closed">Closed</option>
                  </select>
                </div>
              </div>

              {/* Lead Details Preview */}
              {lead.leadJsonb && Object.keys(lead.leadJsonb).length > 0 && (
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 text-sm">
                    {Object.entries(lead.leadJsonb).slice(0, 6).map(([key, value]) => (
                      <div key={key} className="flex items-center space-x-2">
                        <span className="text-gray-500 capitalize">{key}:</span>
                        <span className="text-gray-900 truncate">{String(value)}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </Card>
          ))}
        </div>
      )}

      {/* Lead Detail Drawer */}
      <Drawer
        isOpen={showLeadDetail}
        onClose={() => setShowLeadDetail(false)}
        title="Lead Details"
        size="lg"
      >
        {selectedLead && (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Contact Information</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">Name</label>
                  <p className="text-gray-900">{selectedLead.name || 'N/A'}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Email</label>
                  <p className="text-gray-900">{selectedLead.email || 'N/A'}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Phone</label>
                  <p className="text-gray-900">{selectedLead.phone || 'N/A'}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Status</label>
                  <Badge variant={getStatusVariant(selectedLead.status)}>
                    {selectedLead.status}
                  </Badge>
                </div>
              </div>
            </div>

            {selectedLead.leadJsonb && Object.keys(selectedLead.leadJsonb).length > 0 && (
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Additional Information</h3>
                <div className="bg-gray-50 rounded-lg p-4">
                  <pre className="text-sm text-gray-700 whitespace-pre-wrap">
                    {JSON.stringify(selectedLead.leadJsonb, null, 2)}
                  </pre>
                </div>
              </div>
            )}

            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Timeline</h3>
              <div className="space-y-3">
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">Lead Created</p>
                    <p className="text-xs text-gray-500">
                      {formatDistanceToNow(new Date(selectedLead.createdAt))} ago
                    </p>
                  </div>
                </div>
                {/* Additional timeline events would go here */}
              </div>
            </div>

            <div className="flex justify-end space-x-3 pt-4 border-t">
              <Button
                variant="secondary"
                onClick={() => {
                  setShowLeadDetail(false);
                  setShowVendorRouting(true);
                }}
              >
                Route to Vendor
              </Button>
              <Button variant="secondary">
                Add Note
              </Button>
            </div>
          </div>
        )}
      </Drawer>

      {/* Vendor Routing Modal */}
      <VendorRouting
        isOpen={showVendorRouting}
        onClose={() => setShowVendorRouting(false)}
        lead={selectedLead}
        agentId={agent.id}
        onRouted={() => {
          loadLeads();
          setSelectedLead(null);
        }}
      />
    </div>
  );
}
